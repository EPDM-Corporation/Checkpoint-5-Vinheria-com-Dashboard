# -*- coding: utf-8 -*-
"""fiware_sth-comet_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fwOBH4hqUvh9Uo3ZwCfX14in7p3q-zVk
"""

import requests
import matplotlib.pyplot as plt


# Função para obter os dados de luminosidade, umidade e temperatura a partir da API
def obter_dados(lastN, sensorType):
    url = f"http://4.205.195.87:8666/STH/v1/contextEntities/type/Sensor/id/urn:ngsi-ld:Sensor:001/attributes/{sensorType}?lastN={lastN}"

    payload = {}
    headers = {
    'fiware-service': 'smart',
    'fiware-servicepath': '/'
    }

    response = requests.request("GET", url, headers=headers, data=payload)

    if response.status_code == 200:
        data = response.json()
        data_values = data['contextResponses'][0]['contextElement']['attributes'][0]['values']
        return data_values
    else:
        print(f"Erro ao obter dados: {response.status_code}")
        return []


# Função para criar e exibir o gráfico
def plotar_grafico(luminosity_data, temperature_data, humidity_data):
    if not luminosity_data and temperature_data and humidity_data:
        print("Nenhum dado disponível para plotar.")
        return

    # Extrair valores
    luminosidade = [entry['attrValue'] for entry in luminosity_data]
    temperatura = [entry['attrValue'] for entry in temperature_data]
    umidade = [entry['attrValue'] for entry in humidity_data]
    tempos = [entry['recvTime'] for entry in luminosity_data]  # Supondo que os tempos estão sincronizados

    # Calcular as médias
    media_lum = sum(luminosidade) / len(luminosidade)
    media_temp = sum(temperatura) / len(temperatura)
    media_umid = sum(umidade) / len(umidade)

    plt.figure(figsize=(12, 6))

    # Plotar cada linha
    plt.plot(tempos, luminosidade, marker='o', linestyle='-', color='r', label='Luminosidade')
    plt.plot(tempos, temperatura, marker='s', linestyle='-', color='g', label='Temperatura')
    plt.plot(tempos, umidade, marker='^', linestyle='-', color='b', label='Umidade')

    # Linhas médias
    plt.axhline(media_lum, color='r', linestyle='--', label=f'Média Luminosidade: {media_lum:.2f}')
    plt.axhline(media_temp, color='g', linestyle='--', label=f'Média Temperatura: {media_temp:.2f}')
    plt.axhline(media_umid, color='b', linestyle='--', label=f'Média Umidade: {media_umid:.2f}')

    # Configurações do gráfico
    plt.title('Sensor de Temperatura, Umidade e Luminosidade')
    plt.xlabel('Tempo')
    plt.ylabel('Valores')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Solicitar ao usuário um valor "lastN" entre 1 e 100
while True:
    try:
        lastN = int(input("Digite um valor para lastN (entre 1 e 100): "))
        if 1 <= lastN <= 100:
            break
        else:
            print("O valor deve estar entre 1 e 100. Tente novamente.")
    except ValueError:
        print("Por favor, digite um número válido.")

# Obter os dados de luminosidade e plotar o gráfico

luminosity_iot = obter_dados(lastN,"luminosity")
temperature_iot = obter_dados(lastN,"temperature")
humidity_iot = obter_dados(lastN,"humidity")
plotar_grafico(luminosity_iot,temperature_iot,humidity_iot)

